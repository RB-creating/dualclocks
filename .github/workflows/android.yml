name: Build Android APK (Kivy + Buildozer)

on:
  push:
    branches: [ main ]
    paths:
      - "buildozer.spec"
      - "**/*.py"
      - "**/*.kv"
      - "**/*.png"
      - "**/*.jpg"
      - "**/*.ttf"
      - ".github/workflows/build-android.yml"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    env:
      WORKDIR: .              # change if your app lives in a subfolder

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Optional cache; okay to remove if you want always-clean builds
      - name: Cache .buildozer directory (optional)
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            buildozer-${{ runner.os }}-

      - name: Ensure buildozer.spec exists in WORKDIR
        run: |
          cd "$WORKDIR"
          test -f buildozer.spec || { echo "ERROR: $WORKDIR/buildozer.spec not found"; exit 1; }

      # Debug: show what the runner sees
      - name: Show workspace and first lines of buildozer.spec
        run: |
          cd "$WORKDIR"
          pwd
          ls -la
          echo "---- buildozer.spec first 30 lines ----"
          sed -n '1,30p' buildozer.spec || true
          echo "---- main.py first 30 lines ----"
          sed -n '1,30p' main.py || true

      # Validate INI format early
      - name: Validate buildozer.spec format
        run: |
          cd "$WORKDIR"
          python - <<'PY'
          import configparser, sys, pathlib
          p = pathlib.Path("buildozer.spec")
          if not p.exists():
              print("ERROR: buildozer.spec missing"); sys.exit(1)
          first = p.read_text(encoding="utf-8", errors="ignore").splitlines()[0].strip()
          if not first.startswith("["):
              print(f"ERROR: buildozer.spec must start with [app], found: {first!r}")
              sys.exit(1)
          c = configparser.ConfigParser()
          c.read("buildozer.spec", encoding="utf-8")
          if "app" not in c.sections():
              print("ERROR: [app] section missing from buildozer.spec")
              sys.exit(1)
          print("buildozer.spec looks OK.")
          PY

      # ---- The build step inside the Dockerized Buildozer action ----
      - name: Build with Buildozer (debug)
        uses: ArtemSBulgakov/buildozer-action@v1
        id: buildozer
        env:
          USER: root                 # <- fixes "chown: invalid user" issue
          PIP_DEFAULT_TIMEOUT: "180" # <- give pip more time on slow networks
        with:
          workdir: ${{ env.WORKDIR }}
          buildozer_version: "1.5.0" # or "master" if you want the latest dev
          # You can chain multiple commands with ';' (per action README)
          command: >
            python3 -V;
            python3 -m pip --version;
            python3 -m pip install --upgrade pip setuptools wheel;
            python3 -m pip install --upgrade virtualenv Cython;
            python3 -m buildozer --version || true;
            buildozer -v android debug

      - name: List build artifacts
        run: |
          cd "$WORKDIR"
          ls -la bin || true

      - name: Extract app version
        id: get_version
        run: |
          cd "$WORKDIR"
          python - <<'PY'
          import os, configparser
          c = configparser.ConfigParser()
          c.read("buildozer.spec", encoding="utf-8")
          ver = c.get("app", "version", fallback="0.0.0").strip()
          print("Version:", ver)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"version={ver}\n")
          PY

      - name: Rename APK (friendly name)
        run: |
          cd "$WORKDIR"
          set -x
          ver="${{ steps.get_version.outputs.version }}"
          shopt -s nullglob
          for f in bin/*-debug*.apk bin/*.apk; do
            new="bin/dualclocks-v${ver}-debug.apk"
            mv -f "$f" "$new" && echo "Renamed to $new" && break
          done
          ls -la bin

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: dualclocks-debug-${{ steps.get_version.outputs.version }}
          path: ${{ env.WORKDIR }}/bin/*.apk
          if-no-files-found: error
          retention-days: 7
