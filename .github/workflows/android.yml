name: Android APK
on:
  workflow_dispatch:

# Required so the workflow can create releases and upload assets
permissions:
  contents: write

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Build with Buildozer (self-contained venv, full logs)
        id: buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        env:
          USER: root
          HOME_DIR: /root
          APP_ANDROID_ARCH: arm64-v8a
          PIP_BREAK_SYSTEM_PACKAGES: "1"
        with:
          workdir: .
          buildozer_version: stable
          command: |
            set -eux

            # Isolated venv; host tools for pyjnius build
            python3 -m venv .ci-venv
            . .ci-venv/bin/activate
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install "Cython<3" buildozer

            # Ensure buildozer.spec keys (no inline comments; keep POSIX sh)
            if grep -qE '^[[:space:]]*log_level[[:space:]]*=' buildozer.spec; then
              sed -i 's/^[[:space:]]*log_level[[:space:]]*=.*/log_level = 2/' buildozer.spec
            else
              printf '\nlog_level = 2\n' >> buildozer.spec
            fi

            if grep -qE '^[[:space:]]*p4a\.branch[[:space:]]*=' buildozer.spec; then
              sed -i 's/^[[:space:]]*p4a\.branch[[:space:]]*=.*/p4a.branch = develop/' buildozer.spec
            else
              printf '\np4a.branch = develop\n' >> buildozer.spec
            fi

            if grep -qE '^[[:space:]]*requirements[[:space:]]*=' buildozer.spec; then
              sed -i 's/^[[:space:]]*requirements[[:space:]]*=.*/requirements = python3, kivy==2.3.0, tzdata/' buildozer.spec
            else
              printf '\nrequirements = python3, kivy==2.3.0, tzdata\n' >> buildozer.spec
            fi

            # Build and capture logs WITHOUT a pipeline (dash-safe)
            python -m buildozer --version || true
            python -m buildozer -v android debug > buildozer_console.log 2>&1
            status=$?

            # Surface the important parts to the console
            head -n 200 buildozer_console.log || true
            tail -n 200 buildozer_console.log || true

            # Exit with the actual Buildozer status
            exit $status

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-logs
          path: |
            buildozer_console.log
            .buildozer/**/*.log
            .buildozer/**/*.txt
            .buildozer/**/logs/**
          if-no-files-found: ignore

      # Rename the APK so the inner file name is predictable
      - name: Rename APK to dualclocks.apk
        if: success()
        run: |
          set -eux
          # The Buildozer action exposes the APK path as an output
          src="${{ steps.buildozer.outputs.filename }}"

          # Fallback: find the first .apk if the output wasn't set
          if [ ! -f "$src" ]; then
            src="$(find . -type f -name "*.apk" | head -n 1)"
          fi

          echo "Source APK: $src"
          cp "$src" dualclocks.apk
          ls -l dualclocks.apk

      # Keep the artifact in Actions for convenience (zip named dualclocks.zip)
      - name: Upload APK artifact (dualclocks.zip)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dualclocks
          path: dualclocks.apk
          if-no-files-found: error

      # ----- NEW: Create a Git tag and GitHub Release, and attach dualclocks.apk -----

      # Pick a tag name & release title (using the workflow run number for uniqueness)
      - name: Set release variables
        if: success()
        id: relvars
        run: |
          echo "TAG=v${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
          echo "NAME=Android Debug Build #${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      # Create / update the release and upload the APK asset
      - name: Publish GitHub Release with APK
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relvars.outputs.TAG }}
          name: ${{ steps.relvars.outputs.NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dualclocks.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
